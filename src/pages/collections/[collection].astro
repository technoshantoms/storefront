---
import { getCollectionById, getProducts } from 'storefront:client';
import { z } from 'zod';
import CheckboxLink from '~/components/ui/CheckboxLink.astro';
import { PAGE_ITEM_COUNT } from '~/config.ts';
import { applyCacheHeaders, CacheTags } from '~/lib/headers.ts';
import ProductCard from '~/features/product/ProductCard.astro';
import PrimaryLayout from '~/layouts/PrimaryLayout.astro';
import SideColumnLayout from '~/layouts/SideColumnLayout.astro';
import { getProductStock } from '~/lib/products.ts';
import { unwrap, getPaginationLinks } from '~/lib/util.ts';

const PAGE_NUMBER_PARAM = 'page';

const searchParams = Object.fromEntries(Astro.url.searchParams);

const sort = z.enum(['price']).optional().parse(searchParams.sort);
const order = z.enum(['asc', 'desc']).optional().parse(searchParams.order);
const currentPage = z
	.number({ coerce: true })
	.int()
	.positive()
	.default(1)
	.parse(searchParams[PAGE_NUMBER_PARAM]);

const collectionId = unwrap(Astro.params.collection, 'Collection param not found');
const collectionResponse = await getCollectionById({
	path: { id: collectionId },
});

if (collectionResponse.error) {
	return Astro.redirect('/');
}

const productsResponse = await getProducts({
	query: {
		collectionId,
		sort,
		order,
		limit: PAGE_ITEM_COUNT,
		offset: (currentPage - 1) * PAGE_ITEM_COUNT,
		withCount: true,
	},
});

if (!productsResponse.data) {
	return new Response(undefined, { status: 404 });
}

const collection = collectionResponse.data;
const products = productsResponse.data.items.filter((product) => {
	return getProductStock(product) > 0;
});

const totalProductsInCollection = productsResponse.data.count!;
const totalPages = Math.ceil(totalProductsInCollection / PAGE_ITEM_COUNT);
if (totalPages > 1)
	console.log(`Page ${currentPage} of ${totalPages} for collection: ${collectionId}`);

const paginationLinks = totalPages > 1 ? getPaginationLinks(Astro.url.searchParams, {
	paramName: PAGE_NUMBER_PARAM,
	currentPage: currentPage,
	totalPages: totalPages
}) : null;

const cacheTags = { collectionIds: [collectionId] };
const additionalInfoTags = CacheTags.toValues(cacheTags);
applyCacheHeaders(Astro.response.headers, { cacheTags });
---

<PrimaryLayout title={`Astro Shop | ${collection.name}`} additionalInfoTags={additionalInfoTags}>
	<div class="pt-4">
		<SideColumnLayout class="flex flex-wrap gap-4">
			<div slot="aside" class="flex flex-col gap-4 py-4">
				<header>
					<h2 class="text-2xl font-bold">
						{collection.name}
					</h2>
					<p class="text-sm font-medium text-slate-600">
						{totalProductsInCollection} products
					</p>
				</header>
				<nav class="flex flex-col gap-2" aria-labelledby="sort-by-heading">
					<h3 id="sort-by-heading" class="font-semibold">Sort by</h3>
					<ul class="contents">
						<li>
							<CheckboxLink href={`?sort=price&order=asc`} label="Price: Low to High" />
						</li>
						<li>
							<CheckboxLink href={`?sort=price&order=desc`} label="Price: High to Low" />
						</li>
					</ul>
				</nav>
			</div>

			<section slot="main" class="flex flex-col gap-12">
				<div
					class="grid grid-cols-[repeat(auto-fill,minmax(16rem,1fr))] gap-4"
					aria-labelledby="products-heading"
					aria-label="Products"
				>
					{products.map((product) => <ProductCard {...product} />)}
				</div>
				{ !!paginationLinks && 
					<div class="flex justify-center gap-4">
						<span>
							{
								paginationLinks.prev ? 
									(<a href={paginationLinks.prev}}>&lt;</a>)
									: (<span class="text-theme-base-400">&lt;</span>)	
							}
						</span>
						<span class="border px-2">{currentPage}</span>
						<span>
							{
								paginationLinks.next ? 
									(<a href={paginationLinks.next}}>&gt;</a>)
									: (<span class="text-theme-base-400">&gt;</span>)
							}
						</span>
					</div>
				}
			</section>
		</SideColumnLayout>
	</div>
</PrimaryLayout>
