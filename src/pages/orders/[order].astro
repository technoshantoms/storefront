---
import { GOOGLE_GEOLOCATION_SERVER_KEY } from 'astro:env/server';
import { type Address, type LineItem, getOrderById } from 'storefront:client';
import { z } from 'astro/zod';
import successIcon from '~/assets/checkout-success-icon.svg';
import Shipping from '~/components/Shipping.astro';
import { ONE_DAY } from '~/config.ts';
import PrimaryLayout from '~/layouts/PrimaryLayout.astro';
import { formatOneLineAddress } from '~/lib/address.ts';
import { formatProductPrice } from '~/lib/currency.ts';
import { unwrap } from '~/lib/util.ts';
import { productPath } from '~/paths.ts';

const orderId = unwrap(Astro.params.order, 'order param not found');

const orderResponse = await getOrderById({ path: { id: orderId } });
if (!orderResponse.data) {
	console.error(orderResponse.error);
	return Astro.redirect('/');
}

const order = orderResponse.data;

async function getGeoLocation(address: Exclude<Address, null>) {
	if (!GOOGLE_GEOLOCATION_SERVER_KEY) {
		console.error('Missing GOOGLE_GEOLOCATION_SERVER_KEY');
		return undefined;
	}
	const url = new URL('https://maps.googleapis.com/maps/api/geocode/json');
	url.searchParams.append('address', formatOneLineAddress(address));
	url.searchParams.append('key', GOOGLE_GEOLOCATION_SERVER_KEY);
	let geo;
	try {
		geo = await fetch(url);
		const { results } = z
			.object({
				results: z
					.array(
						z.object({
							geometry: z.object({
								location: z.object({
									lat: z.number(),
									lng: z.number(),
								}),
							}),
						}),
					)
					.nonempty(),
			})
			.parse(await geo.clone().json());
		return results[0].geometry.location;
	} catch (error) {
		if (geo) {
			console.error(`Failed to get geo location from shipping address [${geo.status}]`, error);
			console.error('Full response: ', await geo.text());
			return undefined;
		}
		throw error;
	}
}

const geoLocation = order.shippingAddress && (await getGeoLocation(order.shippingAddress));
if (!order.shippingAddress) {
	console.error('Stripe unexpectedly did not provide a shipping address in the session details.');
	// Display the information we can with a status code for error tracking.
	Astro.response.status = 500;
} else {
	Astro.response.headers.set('cache-control', `public,max-age=0,must-revalidate`);
	Astro.response.headers.set(
		// Order page can be cached for longer.
		// Note: lower s-maxage if you add timely information like shipping status.
		'cdn-cache-control',
		`public,s-maxage=${ONE_DAY},stale-while-revalidate=${60 * 30}`,
	);
}
---

<PrimaryLayout title="Thanks for your order">
	<div class="mx-auto flex w-full max-w-prose flex-col gap-y-2 text-slate-900">
		<header class="flex flex-col gap-4 py-8">
			<img
				src={successIcon.src}
				alt="Checkmark on receipt with sparkles"
				class="mx-auto h-24 w-24"
			/>
			<h1 class="text-center text-xl font-bold">
				{
					order.customerName
						? `Thank you for your order, ${order.customerName}!`
						: 'Thank you for your order!'
				}
			</h1>
		</header>
		{
			order.shippingAddress && geoLocation && (
				<Shipping address={order.shippingAddress} location={geoLocation} />
			)
		}
		<h2 class="mb-4 mt-8 text-lg font-bold">Items in your order</h2>
		<ul>
			{
				(order.lineItems as LineItem[])?.map(({ quantity, productVariant }) => (
					<li>
						<a class="flex items-center gap-2 py-2" href={productPath(productVariant.product.slug)}>
							<img
								src={productVariant.product.imageUrl}
								alt={productVariant.product.name}
								class="size-24 rounded object-contain"
							/>
							<div class="flex flex-1 flex-col gap-1">
								<h3>{productVariant.product.name}</h3>
								<div class="flex flex-wrap gap-1">
									<p class="text-slate-700">Quantity: {quantity}</p>
									{Object.entries(productVariant.options).map(([option, value]) => (
										<p class="text-slate-700 before:text-slate-500 before:content-['â€¢']">
											{option}: {value}
										</p>
									))}
								</div>
							</div>
							{productVariant.product.discount > 0 ? (
								<p class="">
									<span class="text-slate-500 line-through">
										{formatProductPrice(productVariant.product.price * quantity)}
									</span>
									<br />
									<span class="text-slate-700">
										{formatProductPrice(
											(productVariant.product.price - productVariant.product.discount) * quantity,
										)}
									</span>
								</p>
							) : (
								<p class="">{formatProductPrice(productVariant.product.price * quantity)}</p>
							)}
						</a>
					</li>
				))
			}
		</ul>
		<div class="flex justify-between gap-4">
			<p>Subtotal</p>
			<p class="text-right">{formatProductPrice(order.totalPrice - order.shippingPrice)}</p>
		</div>
		<div class="flex justify-between gap-4">
			<p>Shipping</p>
			<p class="text-right">{formatProductPrice(order.shippingPrice)}</p>
		</div>
		<hr class="my-2" />
		<div class="flex justify-between gap-4 text-lg">
			<p>Total</p>
			<p class="text-right">{formatProductPrice(order.totalPrice)}</p>
		</div>
	</div>
</PrimaryLayout>
